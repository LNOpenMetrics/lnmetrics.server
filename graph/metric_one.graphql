directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type ChannelFee {
  base: Int! @goField(name: "base")
  per_msat: Int! @goField(name: "PerMSat")
}

type ChannelLimits {
  min: Int! @goField(name: "Min")
  max: Int! @goField(name: "Max")
}

type StatusChannel {
  node_id: String! @goField(name: "NodeId")
  node_alias: String! @goField(name: "NodeAlias")
  color: String! @goField(name: "Color")
  capacity: Int! @goField(name: "Capacity")
  forwards: [PaymentInfo!]! @goField(name: "Forwards")
  up_time: [ChannelStatus!]! @goField(name: "UpTime")
  online: Boolean! @goField(name: "Online")
  last_update: Int! @goField(name: "LastUpdate")
  direction: String! @goField(name: "Direction")
  fee: ChannelFee! @goField(name: "Fee")
  limits: ChannelLimits! @goField(name: "Limits")
}

type PaymentInfo {
     direction: String! @goField(name: "Direction")
     status: String! @goField(name: "Status")
     failure_reason: String @goField(name: "FailureReason")
     failure_code: Int @goField(name: "FailureCode")
}

type ChannelStatus {
     timestamp: Int! @goField(name: "Timestamp")
     status: String! @goField(name: "Status")
}

# Information about the node implementation
type NodeImpInfo {
  implementation: String! @goField(name: "Implementation")
  version: String! @goField(name: "Version")
}

type MetricOne {
  metric_name: String! @goField(name: "Name")
  node_id: String! @goField(name: "NodeID")
  color: String! @goField(name: "Color")
  node_alias: String! @goField(name: "NodeAlias")
  # Network must be not null but in the server we miss
  # some migration policy, so for the momenet we accept null value
  network: String @goField(name: "Network")
  os_info: OSInfo! @goField(name: "OSInfo")
  # Null for the same reason of Network
  node_info: NodeImpInfo @goField(name: "NodeInfo")
  address: [NodeAddress!]! @goField(name: "Address")
  timezone: String! @goField(name: "Timezone")
  up_time: [Status!]! @goField(name: "UpTime")
  channels_info: [StatusChannel!]! @goField(name: "ChannelsInfo")
  # Same reason of the Network.
  version: Int @goField(name: "Version")
}

type NodeInfo {
     node_id: String! @goField(name: "NodeId")
     metric_one: MetricOne! @goField(name: "MetricOne")
}

type OSInfo {
     os: String! @goField(name: "Os")
     version: String! @goField(name: "Version")
     architecture: String! @goField(name: "Architecture")
}

type Status {
     event: String! @goField(name: "Event")
     channels: ChannelsSummary! @goField(name: "Channels")
     forwards: PaymentsSummary! @goField(name: "Forwards")
     timestamp: Int! @goField(name: "Timestamp")
}

type ChannelsSummary {
     tot_channels: Int! @goField(name: "TotChannels")
     summary: [ChannelSummary!]! @goField(name: "Summary")
}

type ChannelSummary {
     node_id: String! @goField(name: "NodeId")
     alias: String! @goField(name: "alias")
     color: String! @goField(name: "color")
     channel_id: String! @goField(name: "channelId")
     state: String! @goField(name: "state")
}

type PaymentsSummary {
     completed: Int! @goField(name: "Completed")
     failed: Int!  @goField(name: "Failed")
}

# Type that are used inside the query side
type NodeMetadata {
  version: Int! @goField(name: "Version")
  node_id: String! @goField(name: "NodeId")
  alias: String! @goField(name: "Alias")
  color: String! @goField(name: "Color")
  address: [NodeAddress!]! @goField(name: "Address")
  network: String! @goField(name: "Network")
  os_info: OSInfo! @goField(name: "OSInfo")
  node_info: NodeImpInfo! @goField(name: "NodeInfo")
  timezone: String! @goField(name: "Timezone")
  last_update: Int! @goField(name: "LastUpdate")
}

type NodeMetric {
  timestamp: Int! @goField(name: "Timestamp")
  up_time: [Status!]! @goField(name: "UpTime")
  channels_info: [StatusChannel] @goField(name: "ChannelsInfo")
}

# Node address to be reach
type NodeAddress {
  type: String! @goField(name: "Type")
  host: String! @goField(name: "Host")
  port: Int! @goField(name: "Port")
}

## Type Used in the MetricOneResult
type PaymentRating {
  success: Int! @goField(name: "Success")
  faulure: Int! @goField(name: "Faulure")
  internal_failure: Int! @goField(name: "InternalFailure")
}

type PaymentRatingSummary {
  one_day: PaymentRating! @goField(name: "OneDay")
  ten_days: PaymentRating! @goField(name: "TenDays")
  thirty_days: PaymentRating! @goField(name: "ThirtyDays")
  six_months: PaymentRating! @goField(name: "SixMonth")
  full: PaymentRating! @goField(name: "Full")
}

type UpTimeResult {
  one_day: Int! @goField(name: "OneDay")
  ten_days: Int! @goField(name: "TenDays")
  thirty_days: Int! @goField(name: "ThirtyDays")
  six_months: Int! @goField(name: "SixMonth")
  full: Int! @goField(name: "Full")
}

type ChannelInfoResult {
  channel_id: String! @goField(name: "ChannelID")
  node_id: String! @goField(name: "NodeID")
  capacity: Int! @goField(name: "Capacity")
  fee: ChannelFee! @goField(name: "Fee")
  limits: ChannelLimits! @goField(name: "Limits")
  up_time: UpTimeResult! @goField(name: "UpTime")
}

# Implementation of the metric_one output
# Defined in the spec
type MetricOneResult {
  version: Int! @goField(name: "Version")
  age: Int! @goField(name: "Age")
  payment_rating: PaymentRatingSummary! @goField(name: "PaymentRating")
  up_time: UpTimeResult! @goField(name: "UpTime")
  channes_info: [ChannelInfoResult!]! @goField(name: "ChannelsInfo")
}

# Deprecated, remove this when add node metrics will be removed
input NodeMetrics {
     node_id: String! @goField(name: "NodeID")
     payload_metric_one: String! @goField(name: "PayloadMetricOne")
}

# Query definition
type Query {
  # backword compatibility with old client, for two version
  nodes: [String!]! @goField(name: "Nodes"), @deprecated(reason: "This method give not enough details, please considered to use getNodes that return a more rich payload.")

  # Get the list of nodes that are contributing in metric collection
  getNodes(network: String!): [NodeMetadata!]!
  # Get the node metadata if exist on the server
  getNode(network: String!, node_id: String!): NodeMetadata!
  # Get Metric One of the node id in a period [start, end], if the end and start are -1
  # the query return all the data collected from the entire period of metrics collection.
  getMetricOne(node_id: String!, start_period: Int!, end_period: Int!): MetricOne!
  # Get the metric one result
  getMetricOneResult(network: String!, node_id: String!): MetricOneResult!
}

type Mutation {
  # backword compatibility with old client, for two version
  addNodeMetrics(input: NodeMetrics!): MetricOne! @deprecated(reason: "This method not support the signature, please considered to used init and update metric one.")
  # Mutation query that it is called from client side when it is back
  # or it is the first time that it is on online on the network
  # in case we know already this metrics, and the client have a clean db, we
  # will return the full Metric One
  initMetricOne(node_id: String!, payload: String!, signature: String!): MetricOne!
  # Mutation query that it is called from a client side when the time to
  # Update the metrics came.
  updateMetricOne(node_id: String!, payload: String!, signature: String!): Boolean!
}
